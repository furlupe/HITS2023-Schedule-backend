// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Schedule.Utils;

#nullable disable

namespace Schedule.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroupLesson", b =>
                {
                    b.Property<int>("GroupsNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsNumber", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("GroupLesson");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("0aae5047-0bcc-400c-a4d6-a5f11205ef29"),
                            UsersId = new Guid("8c130293-5c53-4c90-92f5-90c64b2578a6")
                        });
                });

            modelBuilder.Entity("Schedule.Models.Cabinet", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Number"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Number");

                    b.ToTable("Cabinets");

                    b.HasData(
                        new
                        {
                            Number = 101,
                            Name = "Cabinet No. 101"
                        },
                        new
                        {
                            Number = 102,
                            Name = "Cabinet No. 102"
                        },
                        new
                        {
                            Number = 103,
                            Name = "Cabinet No. 103"
                        },
                        new
                        {
                            Number = 211,
                            Name = "Chill cabinet"
                        },
                        new
                        {
                            Number = 222,
                            Name = "Toilet"
                        },
                        new
                        {
                            Number = 451,
                            Name = "Denis' basement"
                        },
                        new
                        {
                            Number = 333,
                            Name = "Computer class"
                        },
                        new
                        {
                            Number = 452,
                            Name = "Hell"
                        },
                        new
                        {
                            Number = 123,
                            Name = "Sussy spaceship"
                        },
                        new
                        {
                            Number = 141
                        },
                        new
                        {
                            Number = 332
                        },
                        new
                        {
                            Number = 443
                        });
                });

            modelBuilder.Entity("Schedule.Models.Group", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Number"));

                    b.HasKey("Number");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Number = 972103
                        },
                        new
                        {
                            Number = 972203
                        },
                        new
                        {
                            Number = 972102
                        },
                        new
                        {
                            Number = 972202
                        },
                        new
                        {
                            Number = 972101
                        },
                        new
                        {
                            Number = 272201
                        },
                        new
                        {
                            Number = 271805
                        },
                        new
                        {
                            Number = 271905
                        });
                });

            modelBuilder.Entity("Schedule.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CabinetNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CabinetNumber");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Schedule.Models.LessonScheduled", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaseLessonId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("TimeslotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BaseLessonId");

                    b.HasIndex("TimeslotId");

                    b.ToTable("ScheduledLessons");
                });

            modelBuilder.Entity("Schedule.Models.RefreshToken", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Value");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Schedule.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43f4b289-ceb7-4a45-b777-805db276ee85"),
                            Value = 0
                        },
                        new
                        {
                            Id = new Guid("39194cef-ab19-4a22-8fa5-4eb31bdaa23e"),
                            Value = 1
                        },
                        new
                        {
                            Id = new Guid("13f61564-b811-481c-8906-96731a2d9b19"),
                            Value = 2
                        },
                        new
                        {
                            Id = new Guid("e89c5098-b21f-495e-8e86-bcda9cc0a9ea"),
                            Value = 3
                        },
                        new
                        {
                            Id = new Guid("0aae5047-0bcc-400c-a4d6-a5f11205ef29"),
                            Value = 4
                        });
                });

            modelBuilder.Entity("Schedule.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c99e7876-17c5-4aaf-bbfc-3d5ad41b2302"),
                            Name = "Albebra"
                        },
                        new
                        {
                            Id = new Guid("9b81c63e-ef4a-4b9a-9dc0-64e070bbd88a"),
                            Name = "English language"
                        },
                        new
                        {
                            Id = new Guid("14e248e5-90e1-488b-9ee1-91540df45420"),
                            Name = "Programming"
                        },
                        new
                        {
                            Id = new Guid("c8b2676d-a5bb-4e67-b9e4-484627252ae7"),
                            Name = "Amogusing"
                        },
                        new
                        {
                            Id = new Guid("05acddde-9cab-4fb2-94f8-b70536fc08f7"),
                            Name = "Meth cooking"
                        },
                        new
                        {
                            Id = new Guid("db58ddae-5b8e-41f0-9894-27307fd92da1"),
                            Name = "Russian language"
                        },
                        new
                        {
                            Id = new Guid("72d28952-ea88-487a-b805-7d5b54db4ccd"),
                            Name = "Requirements development"
                        },
                        new
                        {
                            Id = new Guid("783cda7b-6fd6-4547-a1a5-eaf217dcedbb"),
                            Name = "Linear bebra"
                        });
                });

            modelBuilder.Entity("Schedule.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8384666a-473d-4adf-9479-5283f51a7483"),
                            Name = "Amogus Ballser"
                        },
                        new
                        {
                            Id = new Guid("89a041f6-6a44-42ab-a60b-c7a28f7421d4"),
                            Name = "Name Name Teacher"
                        },
                        new
                        {
                            Id = new Guid("753c1536-f2f7-4c58-a695-bfa2acc7fbd2"),
                            Name = "Zenis Dmeev"
                        },
                        new
                        {
                            Id = new Guid("866b419d-ea60-48b7-bb78-629ab9df7252"),
                            Name = "Ilia Volgin"
                        },
                        new
                        {
                            Id = new Guid("7a45f422-5c96-46c4-8fae-fdcf20965b67"),
                            Name = "Neel Kiggers"
                        },
                        new
                        {
                            Id = new Guid("2ee6511d-c549-4684-9752-b5da3be00692"),
                            Name = "Nuck Figgers"
                        },
                        new
                        {
                            Id = new Guid("5c1d75d3-ff22-45c1-a0c2-b4530c3654c6"),
                            Name = "Walter White"
                        },
                        new
                        {
                            Id = new Guid("781722b7-bcbc-4063-943c-24d04f92207a"),
                            Name = "Kid named Finger"
                        });
                });

            modelBuilder.Entity("Schedule.Models.Timeslot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("EndsAt")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("StartsAt")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("Timeslots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3873edf2-e98b-49a2-bfd3-65b9b78641b1"),
                            EndsAt = new TimeOnly(10, 20, 0),
                            StartsAt = new TimeOnly(8, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("c9fd8e36-228d-421d-a1d4-dec748a1d68b"),
                            EndsAt = new TimeOnly(12, 10, 0),
                            StartsAt = new TimeOnly(10, 35, 0)
                        },
                        new
                        {
                            Id = new Guid("01d980ed-c45e-4604-a824-35f17d63e015"),
                            EndsAt = new TimeOnly(14, 0, 0),
                            StartsAt = new TimeOnly(12, 25, 0)
                        },
                        new
                        {
                            Id = new Guid("880f1384-3364-4e56-afb3-2f129b8cae80"),
                            EndsAt = new TimeOnly(16, 20, 0),
                            StartsAt = new TimeOnly(14, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("5cd9209b-b6bb-43ef-a235-e6d4f8045fa5"),
                            EndsAt = new TimeOnly(18, 10, 0),
                            StartsAt = new TimeOnly(16, 35, 0)
                        },
                        new
                        {
                            Id = new Guid("9d5dfef8-ae1e-467c-9305-0f5120487209"),
                            EndsAt = new TimeOnly(20, 0, 0),
                            StartsAt = new TimeOnly(18, 25, 0)
                        },
                        new
                        {
                            Id = new Guid("31d17042-4df5-462b-9206-ce3e4815d2d6"),
                            EndsAt = new TimeOnly(21, 50, 0),
                            StartsAt = new TimeOnly(20, 15, 0)
                        });
                });

            modelBuilder.Entity("Schedule.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<int?>("GroupNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeacherProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupNumber");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("TeacherProfileId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c130293-5c53-4c90-92f5-90c64b2578a6"),
                            Login = "furlupe",
                            Password = "3414A9BE42AE5049DD6DBEE1E2C70A986C2E5C20B6E7BF3DDA103678FDDAA7DB"
                        });
                });

            modelBuilder.Entity("GroupLesson", b =>
                {
                    b.HasOne("Schedule.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Schedule.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schedule.Models.Lesson", b =>
                {
                    b.HasOne("Schedule.Models.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Schedule.Models.LessonScheduled", b =>
                {
                    b.HasOne("Schedule.Models.Lesson", "BaseLesson")
                        .WithMany()
                        .HasForeignKey("BaseLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.Timeslot", "Timeslot")
                        .WithMany()
                        .HasForeignKey("TimeslotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseLesson");

                    b.Navigation("Timeslot");
                });

            modelBuilder.Entity("Schedule.Models.RefreshToken", b =>
                {
                    b.HasOne("Schedule.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Schedule.Models.User", b =>
                {
                    b.HasOne("Schedule.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupNumber")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Schedule.Models.Teacher", "TeacherProfile")
                        .WithMany()
                        .HasForeignKey("TeacherProfileId");

                    b.Navigation("Group");

                    b.Navigation("TeacherProfile");
                });

            modelBuilder.Entity("Schedule.Models.Group", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
