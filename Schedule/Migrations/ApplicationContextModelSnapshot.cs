// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Schedule.Utils;

#nullable disable

namespace Schedule.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroupLesson", b =>
                {
                    b.Property<int>("GroupsNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsNumber", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("GroupLesson");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("168d21d3-42ac-4924-b829-81497b77ea23"),
                            UsersId = new Guid("9d3f5535-220d-40b2-83bd-6b69b9cf4de8")
                        });
                });

            modelBuilder.Entity("Schedule.Models.Cabinet", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Number"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Number");

                    b.ToTable("Cabinets");

                    b.HasData(
                        new
                        {
                            Number = 101,
                            Name = "Cabinet No. 101"
                        },
                        new
                        {
                            Number = 102,
                            Name = "Cabinet No. 102"
                        },
                        new
                        {
                            Number = 103,
                            Name = "Cabinet No. 103"
                        },
                        new
                        {
                            Number = 211,
                            Name = "Chill cabinet"
                        },
                        new
                        {
                            Number = 222,
                            Name = "Toilet"
                        },
                        new
                        {
                            Number = 451,
                            Name = "Denis' basement"
                        },
                        new
                        {
                            Number = 333,
                            Name = "Computer class"
                        },
                        new
                        {
                            Number = 452,
                            Name = "Hell"
                        },
                        new
                        {
                            Number = 123,
                            Name = "Sussy spaceship"
                        },
                        new
                        {
                            Number = 141
                        },
                        new
                        {
                            Number = 332
                        },
                        new
                        {
                            Number = 443
                        });
                });

            modelBuilder.Entity("Schedule.Models.Group", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Number"));

                    b.HasKey("Number");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Number = 972103
                        },
                        new
                        {
                            Number = 972203
                        },
                        new
                        {
                            Number = 972102
                        },
                        new
                        {
                            Number = 972202
                        },
                        new
                        {
                            Number = 972101
                        },
                        new
                        {
                            Number = 272201
                        },
                        new
                        {
                            Number = 271805
                        },
                        new
                        {
                            Number = 271905
                        });
                });

            modelBuilder.Entity("Schedule.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CabinetNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CabinetNumber");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Schedule.Models.LessonScheduled", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaseLessonId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("TimeslotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BaseLessonId");

                    b.HasIndex("TimeslotId");

                    b.ToTable("ScheduledLessons");
                });

            modelBuilder.Entity("Schedule.Models.RefreshToken", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Value");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Schedule.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb7dead0-e43f-408c-bddc-8ed060044b99"),
                            Value = 0
                        },
                        new
                        {
                            Id = new Guid("6678a845-4823-4896-bb76-dada882fbd21"),
                            Value = 1
                        },
                        new
                        {
                            Id = new Guid("b9eb356d-9cdb-4004-83a4-f2061955e47a"),
                            Value = 2
                        },
                        new
                        {
                            Id = new Guid("6b87bbf4-f3e7-42a9-b016-a0bc11bcdaae"),
                            Value = 3
                        },
                        new
                        {
                            Id = new Guid("168d21d3-42ac-4924-b829-81497b77ea23"),
                            Value = 4
                        });
                });

            modelBuilder.Entity("Schedule.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98c6e09e-d266-4904-9ed7-c7539046e7f8"),
                            Name = "Albebra"
                        },
                        new
                        {
                            Id = new Guid("1515e5f9-3b3a-4470-a057-856ba4a2181f"),
                            Name = "English language"
                        },
                        new
                        {
                            Id = new Guid("6e8ab95b-786a-4c5d-9663-820e7851eee3"),
                            Name = "Programming"
                        },
                        new
                        {
                            Id = new Guid("f553e9ac-2d78-4910-9502-cdeb995a466b"),
                            Name = "Amogusing"
                        },
                        new
                        {
                            Id = new Guid("4eb6537d-0db0-45f2-9c0b-ba3c4f9e5c8e"),
                            Name = "Meth cooking"
                        },
                        new
                        {
                            Id = new Guid("3e234026-f43a-4017-87d5-5aeddb9b7f90"),
                            Name = "Russian language"
                        },
                        new
                        {
                            Id = new Guid("75eae3a0-add7-4c6f-9278-07a384d6801e"),
                            Name = "Requirements development"
                        },
                        new
                        {
                            Id = new Guid("b593359a-4b41-4a95-861d-9753288509c9"),
                            Name = "Linear bebra"
                        });
                });

            modelBuilder.Entity("Schedule.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550c1c87-9c58-4752-a0fa-c2f40ab21f2e"),
                            Name = "Amogus Ballser"
                        },
                        new
                        {
                            Id = new Guid("11e08458-b324-42ba-ac9e-6a3d7e792aea"),
                            Name = "Name Name Teacher"
                        },
                        new
                        {
                            Id = new Guid("7965958b-fd27-407d-86f4-9a474264cd61"),
                            Name = "Zenis Dmeev"
                        },
                        new
                        {
                            Id = new Guid("26bc1786-96b1-4f1d-93ea-2f44afde694f"),
                            Name = "Ilia Volgin"
                        },
                        new
                        {
                            Id = new Guid("34c601af-7bea-4f26-9b4b-c5e7958ab679"),
                            Name = "Neel Kiggers"
                        },
                        new
                        {
                            Id = new Guid("75bf8531-907a-4ae6-b59f-719f61055eea"),
                            Name = "Nuck Figgers"
                        },
                        new
                        {
                            Id = new Guid("14dec041-abce-46fd-819d-5e8f71bd6218"),
                            Name = "Walter White"
                        },
                        new
                        {
                            Id = new Guid("cc4116f9-019c-40ab-88f1-ef341e86f19e"),
                            Name = "Kid named Finger"
                        });
                });

            modelBuilder.Entity("Schedule.Models.Timeslot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("EndsAt")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("StartsAt")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("Timeslots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ead857b-5293-47d0-834f-38a2f21be4ba"),
                            EndsAt = new TimeOnly(10, 20, 0),
                            StartsAt = new TimeOnly(8, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("30b28c59-ec63-4dad-bea9-d963f421bb35"),
                            EndsAt = new TimeOnly(12, 10, 0),
                            StartsAt = new TimeOnly(10, 35, 0)
                        },
                        new
                        {
                            Id = new Guid("a0b44c5c-831d-4416-8f83-2e22e7bfa242"),
                            EndsAt = new TimeOnly(14, 0, 0),
                            StartsAt = new TimeOnly(12, 25, 0)
                        },
                        new
                        {
                            Id = new Guid("64e23715-462f-48b0-aa6d-667cdf9b8b89"),
                            EndsAt = new TimeOnly(16, 20, 0),
                            StartsAt = new TimeOnly(14, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("7e6f744c-7e55-41c7-8677-cd9867f8d426"),
                            EndsAt = new TimeOnly(18, 10, 0),
                            StartsAt = new TimeOnly(16, 35, 0)
                        },
                        new
                        {
                            Id = new Guid("d2cf45a9-de48-4ce0-ad93-296eccbb6761"),
                            EndsAt = new TimeOnly(20, 0, 0),
                            StartsAt = new TimeOnly(18, 25, 0)
                        },
                        new
                        {
                            Id = new Guid("7d50fa21-2507-442a-b53c-65723b35e67b"),
                            EndsAt = new TimeOnly(21, 50, 0),
                            StartsAt = new TimeOnly(20, 15, 0)
                        });
                });

            modelBuilder.Entity("Schedule.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<int?>("GroupNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeacherProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupNumber");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("TeacherProfileId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d3f5535-220d-40b2-83bd-6b69b9cf4de8"),
                            Login = "furlupe",
                            Password = "3414A9BE42AE5049DD6DBEE1E2C70A986C2E5C20B6E7BF3DDA103678FDDAA7DB"
                        });
                });

            modelBuilder.Entity("GroupLesson", b =>
                {
                    b.HasOne("Schedule.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Schedule.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schedule.Models.Lesson", b =>
                {
                    b.HasOne("Schedule.Models.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Schedule.Models.LessonScheduled", b =>
                {
                    b.HasOne("Schedule.Models.Lesson", "BaseLesson")
                        .WithMany()
                        .HasForeignKey("BaseLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.Timeslot", "Timeslot")
                        .WithMany()
                        .HasForeignKey("TimeslotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseLesson");

                    b.Navigation("Timeslot");
                });

            modelBuilder.Entity("Schedule.Models.RefreshToken", b =>
                {
                    b.HasOne("Schedule.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Schedule.Models.User", b =>
                {
                    b.HasOne("Schedule.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupNumber")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Schedule.Models.Teacher", "TeacherProfile")
                        .WithMany()
                        .HasForeignKey("TeacherProfileId");

                    b.Navigation("Group");

                    b.Navigation("TeacherProfile");
                });

            modelBuilder.Entity("Schedule.Models.Group", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
