// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Schedule.Utils;

#nullable disable

namespace Schedule.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroupLesson", b =>
                {
                    b.Property<int>("GroupsNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsNumber", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("GroupLesson");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("d2aae306-326f-4af7-bd14-162846246640"),
                            UsersId = new Guid("a4d6a415-a989-4198-bbe5-11593409b566")
                        });
                });

            modelBuilder.Entity("Schedule.Models.BlacklistedToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Blacklist");
                });

            modelBuilder.Entity("Schedule.Models.Cabinet", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Number"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Number");

                    b.ToTable("Cabinets");

                    b.HasData(
                        new
                        {
                            Number = 101,
                            Name = "Cabinet No. 101"
                        },
                        new
                        {
                            Number = 102,
                            Name = "Cabinet No. 102"
                        },
                        new
                        {
                            Number = 103,
                            Name = "Cabinet No. 103"
                        },
                        new
                        {
                            Number = 211,
                            Name = "Chill cabinet"
                        },
                        new
                        {
                            Number = 222,
                            Name = "Toilet"
                        },
                        new
                        {
                            Number = 451,
                            Name = "Denis' basement"
                        },
                        new
                        {
                            Number = 333,
                            Name = "Computer class"
                        },
                        new
                        {
                            Number = 452,
                            Name = "Hell"
                        },
                        new
                        {
                            Number = 123,
                            Name = "Sussy spaceship"
                        },
                        new
                        {
                            Number = 141
                        },
                        new
                        {
                            Number = 332
                        },
                        new
                        {
                            Number = 443
                        });
                });

            modelBuilder.Entity("Schedule.Models.Group", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Number"));

                    b.HasKey("Number");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Number = 972103
                        },
                        new
                        {
                            Number = 972203
                        },
                        new
                        {
                            Number = 972102
                        },
                        new
                        {
                            Number = 972202
                        },
                        new
                        {
                            Number = 972101
                        },
                        new
                        {
                            Number = 272201
                        },
                        new
                        {
                            Number = 271805
                        },
                        new
                        {
                            Number = 271905
                        });
                });

            modelBuilder.Entity("Schedule.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CabinetNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CabinetNumber");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Schedule.Models.LessonScheduled", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaseLessonId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("TimeslotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BaseLessonId");

                    b.HasIndex("TimeslotId");

                    b.ToTable("ScheduledLessons");
                });

            modelBuilder.Entity("Schedule.Models.RefreshToken", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Value");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Schedule.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2830fb5c-241d-4bd7-96be-dec2bec312fe"),
                            Value = 0
                        },
                        new
                        {
                            Id = new Guid("df6ec725-46c4-40e9-ad99-d5ae97b5d3a5"),
                            Value = 1
                        },
                        new
                        {
                            Id = new Guid("756fe957-9dce-4768-a349-938f82c4ea67"),
                            Value = 2
                        },
                        new
                        {
                            Id = new Guid("285ff0ee-d361-4d7e-9991-3f04b032588c"),
                            Value = 3
                        },
                        new
                        {
                            Id = new Guid("d2aae306-326f-4af7-bd14-162846246640"),
                            Value = 4
                        });
                });

            modelBuilder.Entity("Schedule.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("223355ca-415f-4b2e-bbcb-114452242017"),
                            Name = "Albebra"
                        },
                        new
                        {
                            Id = new Guid("121f601a-6009-4342-a514-8958bf056d16"),
                            Name = "English language"
                        },
                        new
                        {
                            Id = new Guid("55014fbb-f50b-4091-b523-f447b6d4d827"),
                            Name = "Programming"
                        },
                        new
                        {
                            Id = new Guid("3429d37d-d1e1-43a3-92d8-bef007806616"),
                            Name = "Amogusing"
                        },
                        new
                        {
                            Id = new Guid("4951c037-dd1d-4734-a94b-152151a8d79e"),
                            Name = "Meth cooking"
                        },
                        new
                        {
                            Id = new Guid("f356a853-338b-4f69-a569-6347b55d7ab1"),
                            Name = "Russian language"
                        },
                        new
                        {
                            Id = new Guid("c8e097f1-32b1-4988-8191-11239b673f88"),
                            Name = "Requirements development"
                        },
                        new
                        {
                            Id = new Guid("41e06c50-0ed9-4d8e-8ed0-6c56a5dadc83"),
                            Name = "Linear bebra"
                        });
                });

            modelBuilder.Entity("Schedule.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb7c8865-12c3-458d-9e28-8865cb0cde32"),
                            Name = "Amogus Ballser"
                        },
                        new
                        {
                            Id = new Guid("f7cb6c7c-5ccd-465f-8968-67beb850d37b"),
                            Name = "Name Name Teacher"
                        },
                        new
                        {
                            Id = new Guid("7e7785d7-28ad-47e0-9680-cbaca880ee62"),
                            Name = "Zenis Dmeev"
                        },
                        new
                        {
                            Id = new Guid("abaee0d6-2c2c-487d-885a-993e46f3e34d"),
                            Name = "Ilia Volgin"
                        },
                        new
                        {
                            Id = new Guid("57e46578-b64f-4029-9326-c6da20a25f43"),
                            Name = "Neel Kiggers"
                        },
                        new
                        {
                            Id = new Guid("6efa209c-aaf1-48b6-b496-7b456a216289"),
                            Name = "Nuck Figgers"
                        },
                        new
                        {
                            Id = new Guid("bdb6ec61-2485-458a-a444-547b8f0c947d"),
                            Name = "Walter White"
                        },
                        new
                        {
                            Id = new Guid("baf4cf87-ba84-476c-a9e7-867c5e48fe86"),
                            Name = "Kid named Finger"
                        });
                });

            modelBuilder.Entity("Schedule.Models.Timeslot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("EndsAt")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("StartsAt")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("Timeslots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f0c2b59-105a-47ce-a56a-843eb110cda1"),
                            EndsAt = new TimeOnly(10, 20, 0),
                            StartsAt = new TimeOnly(8, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("735bac68-9006-484b-a6ea-6c1461270d12"),
                            EndsAt = new TimeOnly(12, 10, 0),
                            StartsAt = new TimeOnly(10, 35, 0)
                        },
                        new
                        {
                            Id = new Guid("ec4704be-5499-4e9a-a320-704f621e24f6"),
                            EndsAt = new TimeOnly(14, 0, 0),
                            StartsAt = new TimeOnly(12, 25, 0)
                        },
                        new
                        {
                            Id = new Guid("2ad17207-4073-495c-8704-e5aee81cb7bf"),
                            EndsAt = new TimeOnly(16, 20, 0),
                            StartsAt = new TimeOnly(14, 45, 0)
                        },
                        new
                        {
                            Id = new Guid("bdfcfd50-b12e-409c-81de-d009a59ee4c6"),
                            EndsAt = new TimeOnly(18, 10, 0),
                            StartsAt = new TimeOnly(16, 35, 0)
                        },
                        new
                        {
                            Id = new Guid("c1442044-ae2c-49d3-ac89-c2e652a141a0"),
                            EndsAt = new TimeOnly(20, 0, 0),
                            StartsAt = new TimeOnly(18, 25, 0)
                        },
                        new
                        {
                            Id = new Guid("d772c139-2501-4c29-972f-9ab402451225"),
                            EndsAt = new TimeOnly(21, 50, 0),
                            StartsAt = new TimeOnly(20, 15, 0)
                        });
                });

            modelBuilder.Entity("Schedule.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("GroupNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeacherProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupNumber");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("TeacherProfileId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4d6a415-a989-4198-bbe5-11593409b566"),
                            Login = "furlupe",
                            Password = "3414A9BE42AE5049DD6DBEE1E2C70A986C2E5C20B6E7BF3DDA103678FDDAA7DB"
                        });
                });

            modelBuilder.Entity("GroupLesson", b =>
                {
                    b.HasOne("Schedule.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Schedule.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schedule.Models.Lesson", b =>
                {
                    b.HasOne("Schedule.Models.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Schedule.Models.LessonScheduled", b =>
                {
                    b.HasOne("Schedule.Models.Lesson", "BaseLesson")
                        .WithMany()
                        .HasForeignKey("BaseLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule.Models.Timeslot", "Timeslot")
                        .WithMany()
                        .HasForeignKey("TimeslotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseLesson");

                    b.Navigation("Timeslot");
                });

            modelBuilder.Entity("Schedule.Models.RefreshToken", b =>
                {
                    b.HasOne("Schedule.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Schedule.Models.User", b =>
                {
                    b.HasOne("Schedule.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupNumber");

                    b.HasOne("Schedule.Models.Teacher", "TeacherProfile")
                        .WithMany()
                        .HasForeignKey("TeacherProfileId");

                    b.Navigation("Group");

                    b.Navigation("TeacherProfile");
                });

            modelBuilder.Entity("Schedule.Models.Group", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
